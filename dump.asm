.MODEL SMALL
.STACK 100H
.DATA
	PROMPT1 DB 10,13,"			REPLICA OF DUMP COMMAND$"
	STR1 DB 256 DUP("$")
	NEWLINE DB 10,13,"$"
	SEGMENTADD DW 0
	STARTING DW 0
	ENDING DW 0
	LEN DB 0
	SPACES DB 0
	ERRORMSG DB 10,13,"Error...Greater than two parameter$"
	ERRORMSG1 DB 10,13,"Error...Ending offset is smaller than starting offset$"
.CODE
.386
MAIN PROC
	MOV AX,@DATA
	MOV DS,AX
	
	LEA DX,PROMPT1
	MOV AH,09H
	INT 21H
	
	CALL GETPARAMETERS
	CALL SETPARAMETERS
	
	LEA DX,NEWLINE
	MOV AH,09H
	INT 21H
	
	LEA DX,NEWLINE
	MOV AH,09H
	INT 21H
	
	LEA DX,NEWLINE
	MOV AH,09H
	INT 21H
	
	MOV BX,STARTING
	MOV DX,ENDING
	
	CMP DX,BX
	JL TERMINATE_MAIN
	
	MOV AX,0FFF0H
	AND BX,AX			;IT PRODUCE 0103/0143 TO 0100/0140
	SUB DX,BX			;TO CALCULATE NUMBER OF LINES
	MOV CX,1
	
	;MAKING COUNTER FOR MAIN_LOOP
MAKE_COUNTER:
	CMP DX,10H
	JL TERMINATE_COUNTER
	SUB DX,10H
	INC CX
	JMP MAKE_COUNTER

TERMINATE_COUNTER:
	
	MOV SI,BX				;SI STARTING LINE OFFSET ADDRESS
	MOV DI,STARTING			;DI HAS ACTUAL OFFSET ADDRESS FROM WHERE WE HAVE TO START PRINTING
	
	;CX IS THE MAIN_LOOP COUNTER
MAIN_LOOP:

	PUSH CX			;SAVE COUNTER FOR MAIN_LOOP. CX MAY ALSO BS USE FOR INTERNAL LOOPS
	
	;STORE REQUIRED SEGMENT ADDRESS
	MOV BX,SEGMENTADD
	MOV DS,BX	
	
	;PRINT SEGMENT ADDRESS
	MOV CX,4				;CX HAS 4 TO OUTPUT FOUR HEXA DIGIT
	PUSH CX					;PASSING PARAMETER
	PUSH BX					;PASSING PARAMETER
	CALL HEXAOUT
	
	;PRINT COLON
	MOV DL,":"
	MOV AH,02H
	INT 21H
	
	;PRINT OFFSET ADDRESS
	MOV CX,4				;CX HAS 4 TO OUTPUT FOUR HEXA DIGIT
	PUSH CX					;PASSING PARAMETER
	PUSH SI					;PASSING PARAMETER
	CALL HEXAOUT

	
	;PRINT TWO SPACES
	MOV DL," "
	MOV AH,02H
	INT 21H
	
	MOV DL," "
	MOV AH,02H
	INT 21H

	PUSH DI			;SAVE STARTING OFFSET TO PRINT ASCII
	PUSH SI			;SAVE TO PRINT OFFSET ADDRESS AND FOR COMPARISONS
	MOV CX,17		;COUNTER FOR 16 BYTES AND ONE HYPHON
	
	DEC DI	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DEC SI	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
PRINT_CONTENTS:
	
	CMP DI,SI				;WHEN BOTH OFFESTS ADRESS BECOME SAME THEN IT STARTS PRINTING OTHERWISE PRINT SPACES
	JNE PRINT_SPACES
	PUSH DS					;SAVE SEGMENT ADDRESS
	MOV AX,@DATA			;TO ACCESS ENDING VARIABLE FROM DATA SEGMENT
	MOV DS,AX
	MOV DX,ENDING
	POP DS
	CMP DI,DX			;WHEN DI AND ENDGING OFFSET BECOME SAME THEN IT TERMINATES PRINTING AND PRINT SPACES FOR REMAINING COUNTER
	JE PRINT_REMAINING_SPACES
	CMP CX,09
	JE HYPHON
	
	MOV AX,[DI]
	
	PUSH CX					;SAVE FOR LAST COUNTER
	MOV CX,2				;CX HAS 2 TO OUTPUT TWO HEXA DIGIT
	PUSH CX					;PASSING PARAMETER
	PUSH AX					;PASSING PARAMETER
	CALL HEXAOUT
	POP CX					;RESTORE VALUE FOR LAST COUNTER
	
	INC DI
	INC SI
	
	;PRINT SPACE
	MOV DL," "
	MOV AH,02H
	INT 21H
	
	JMP INCREMENT_DI
	
HYPHON:

	;PRINT BACKSPACE
	MOV DL,8H	
	MOV AH,02H
	INT 21H
	
	;PRINT HYPHON
	MOV DL,"-"		
	MOV AH,02H
	INT 21H
	
	JMP INCREMENT_DI
	
PRINT_SPACES:

	CMP CX,9				;HYPHON DISTURB NO. OF SPACES. THIS CHECK BALANCE NO. OF SPACES
	JE INCREMENT_DI
	MOV AH,02
	MOV DL," "
	INT 21H

	MOV AH,02
	MOV DL," "
	INT 21H
		
	MOV AH,02
	MOV DL," "
	INT 21H
	INC SI	
	
INCREMENT_DI:

	LOOP PRINT_CONTENTS
	JMP TERMINATE_PRINTING
	
PRINT_REMAINING_SPACES:

	CMP CX,9							;HYPHON DISTURB NO. OF SPACES. THIS CHECK BALANCE NO. OF SPACES
	JE PRINT_NO_REMAINING_SPACES
	MOV AH,02
	MOV DL," "
	INT 21H

	MOV AH,02
	MOV DL," "
	INT 21H
		
	MOV AH,02
	MOV DL," "
	INT 21H
	
PRINT_NO_REMAINING_SPACES:	

	LOOP PRINT_REMAINING_SPACES
	
TERMINATE_PRINTING:	

	;PRINT THREE SPACES
	MOV DL," "
	MOV AH,02H
	INT 21H
	
	MOV DL," "
	MOV AH,02H
	INT 21H
	
	MOV DL," "
	MOV AH,02H
	INT 21H
	
	POP SI				;POP STATRING OFFSET ADDRESS	
	POP DI				;POP STARTING OFFSET ADDRESS
	
	PUSH SI				;SAVE FOR COMPARISONS
	MOV CX,16		;COUNTER FOR PRINT ASCII
	
	;PRINT ASCII OF CONTENTS OF DI
PRINT_ASCII:
	CMP SI,DI					;WHEN BOTH OFFESTS ADRESS BECOME SAME THEN IT STARTS PRINTING OTHERWISE PRINT SPACES
	JNE PRINT_ASCII_SPACES
	PUSH DS					;SAVE SEGMENT ADDRESS
	MOV AX,@DATA			;TO ACCESS ENDING VARIABLE FROM DATA SEGMENT
	MOV DS,AX
	MOV DX,ENDING			
	POP DS
	CMP DI,DX				;WHEN DI AND ENDGING OFFSET BECOME SAME THEN IT TERMINATES PRINTING AND PRINT SPACES FOR REMAINING COUNTER
	JE PRINT_REMAINING_ASCII_SPACES
	MOV DL,[DI]
	CMP DL,20H
	JB DOT
	CMP DL,7EH
	JA DOT
	MOV AH,02H
	INT 21H
	INC DI
	JMP ITERATE_ASCII
	
DOT:
	MOV DL,'.'
	MOV AH,02H
	INT 21H
	INC DI
	JMP ITERATE_ASCII
	
PRINT_ASCII_SPACES:
	
	MOV DL," "
	MOV AH,02H
	INT 21H
	
ITERATE_ASCII:	
	INC SI
	LOOP PRINT_ASCII
	
	JMP TERMINATE_PRINT_ASCII
	
PRINT_REMAINING_ASCII_SPACES:
	
	MOV DL,' '
	MOV AH,02H
	INT 21H
	LOOP PRINT_REMAINING_ASCII_SPACES
	
TERMINATE_PRINT_ASCII:	

	;INITIALIZE DATA SEGMENT IN WHICH NEWLNE IS DEFINE
	MOV AX,@DATA
	MOV DS,AX
	
	LEA DX,NEWLINE
	MOV AH,09H 
	INT 21H
	
	POP SI			
	ADD SI,16		;TO ACCESS NEXT LINE OFFSET ADDRESS
	POP CX			;COUNTER FOR MAIN_LOOP
	DEC CX			;DECREMENT FOR COUNTER OF MAIN LOOP
	JNZ MAIN_LOOP
	JMP MAIN_NORMAL_FLOW
	
TERMINATE_MAIN:
	MOV AH,09H
	LEA DX,ERRORMSG1
	INT 21H
	
MAIN_NORMAL_FLOW:
	
	MOV AH,4CH
	INT 21H
MAIN ENDP

;HEXA INPUT START
;THIS FUNCTION TAKES NO PARAMETER AND RETURN HEXA INPUT IN BX
HEXAINP PROC
	PUSH AX
	PUSH CX
	PUSH DX
	MOV CX,04
	XOR BX,BX
	XOR AX,AX
HEXAINP_AGAIN:	
	MOV AH,01H
	INT 21H
	CMP AL,0DH
	JE HEXAINP_REMAIN
	CMP AL,30H
	JB HEXAINP_AGAIN
	CMP AL,39H
	JA HEXAINP_LETTER

	SUB AL,30H
	JMP HEXAINP_AFTER
HEXAINP_LETTER:
	CMP AL,'A'
	JB HEXAINP_AGAIN
	CMP AL,'F'
	JA HEXAINP_AGAIN
	SUB AL,37H
HEXAINP_AFTER:
	SHL BX,4
	OR BL,AL
	LOOP HEXAINP_AGAIN
	
HEXAINP_REMAIN:
	POP DX
	POP CX
	POP AX
	RET
HEXAINP ENDP
;HEXA INPUT END


;HEXA OUTPUT START
;THIS FUNCTION GETS TWO PARAMATER
;ONE HAS HEXA VALUE OTHER ONE TO SELECT DIGITS OF HEXA OUTPUT
HEXAOUT PROC
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH BP
	MOV BP,SP
	MOV BX,[BP+12]
	MOV CX,[BP+14]

HEXAOUT_AGAIN:	
	MOV DL,BH
	SHR DL,4
	ROL BX,4
	CMP DL,0
	JB HEXAOUT_LETTER
	CMP DL,9
	JA HEXAOUT_LETTER

	ADD DL,30H
	JMP HEXAOUT_PRINT
HEXAOUT_LETTER:
	ADD DL,37H
	
HEXAOUT_PRINT:
	MOV AH,02
	INT 21H
	LOOP HEXAOUT_AGAIN
	
	POP BP
	POP DX
	POP CX
	POP BX
	POP AX
	RET 4
HEXAOUT ENDP
;HEXA OUTPUT END

;START GETPARAMETERS
;JUST COPY PARAMETER FROM ES TO MEMORY
GETPARAMETERS PROC
	PUSH DS
	PUSH ES
	MOV AX, DS
	MOV BX, ES
	MOV DS, BX
	MOV ES, AX
	MOV SI, 0080H
	LEA DI, STR1
	
	LODSB ; AL = COUNT
	MOV CH, 0
	MOV CL, AL
	REP MOVSB
	POP ES
	POP DS
	RET
GETPARAMETERS ENDP
;END GETPARAMETERS

;START SETPARAMETERS
SETPARAMETERS PROC
	
	LEA SI,STR1
SETPARAMETERS_CALC_LENGTH:
	MOV AL,[SI]
	CMP AL,'$'
	JE SETPARAMETERS_TERMINATE_CALC_LENGTH
	INC SI
	INC LEN
	JMP SETPARAMETERS_CALC_LENGTH
	
SETPARAMETERS_TERMINATE_CALC_LENGTH:
	
	LEA SI,STR1
	
SETPARAMETERS_CHECK_SPACES:
	MOV AL,[SI]
	CMP AL,' '
	JE SETPARAMETERS_COUNT_SPACES
	CMP AL,'$'
	JE CASE1
SETPARAMETERS_AGAIN_CHECK_SPACES:	
	INC SI
	JMP SETPARAMETERS_CHECK_SPACES
	
SETPARAMETERS_COUNT_SPACES:
	INC SPACES
	JMP SETPARAMETERS_AGAIN_CHECK_SPACES
	
CASE1:
	CMP SPACES,0
	JG CASE2
	MOV SEGMENTADD,073FH
	MOV STARTING,0100H
	MOV ENDING,017FH
	JMP SETPARAMETERS_RET
	
CASE2:
	CMP SPACES,1
	JG CASE3
	
	LEA SI,STR1
	MOV CL,LEN
	
SETPARAMETERS_CHECK_COLON:
	MOV DL,":"
	CMP [SI],DL
	JE SETPARAMETERS_COLON_EXIST
	INC SI
	LOOP SETPARAMETERS_CHECK_COLON
	
	MOV SEGMENTADD,073FH
	LEA SI,STR1
	INC SI
	CALL STRINGTOMEMORY
	MOV STARTING,BX
	ADD BX,007FH
	MOV ENDING,BX
	
	JMP SETPARAMETERS_RET
	
SETPARAMETERS_COLON_EXIST:
	LEA SI,STR1
	INC SI
	CALL STRINGTOMEMORY
	MOV SEGMENTADD,BX
	
	INC SI
	CALL STRINGTOMEMORY
	MOV STARTING,BX
	ADD BX,007FH
	MOV ENDING,BX
	
	JMP SETPARAMETERS_RET
	
CASE3:
	CMP SPACES,2
	JG CASE4
	LEA SI,STR1
	MOV CL,LEN
	
SETPARAMETERS_CHECK_COLON1:
	MOV DL,":"
	CMP [SI],DL
	JE SETPARAMETERS_COLON_EXIST1
	INC SI
	LOOP SETPARAMETERS_CHECK_COLON1
	
	MOV SEGMENTADD,073FH
	LEA SI,STR1
	INC SI
	CALL STRINGTOMEMORY
	MOV STARTING,BX
	
	INC SI
	CALL STRINGTOMEMORY
	MOV ENDING,BX
	JMP SETPARAMETERS_RET
	
SETPARAMETERS_COLON_EXIST1:
	LEA SI,STR1
	INC SI
	CALL STRINGTOMEMORY
	MOV SEGMENTADD,BX
	
	INC SI
	CALL STRINGTOMEMORY
	MOV STARTING,BX
	
	INC SI
	CALL STRINGTOMEMORY
	MOV ENDING,BX
	
	JMP SETPARAMETERS_RET
	
CASE4:
	MOV AH,09
	LEA DX,ERRORMSG
	INT 21H
	
	MOV AH,4CH
	INT 21H
	
SETPARAMETERS_RET:	
	RET
SETPARAMETERS ENDP
;END SETPARAMETERS

;START STRING TO MEMORY
STRINGTOMEMORY PROC
	PUSH AX
	PUSH CX
	PUSH DX
	
	MOV CX,04
	XOR BX,BX
	XOR AX,AX
STRINGTOMEMORY_AGAIN:	
	MOV AL,[SI]
	CMP AL,'$'
	JE STRINGTOMEMORY_JUST_PASS
	CMP AL,':'
	JE STRINGTOMEMORY_JUST_PASS
	CMP AL,' '
	JE STRINGTOMEMORY_JUST_PASS
	CMP AL,39H
	JA STRINGTOMEMORY_LETTER
	SUB AL,30H
	JMP STRINGTOMEMORY_AFTER
	
STRINGTOMEMORY_LETTER:
	
	SUB AL,37H
	
STRINGTOMEMORY_AFTER:
	SHL BX,4
	OR BL,AL
	INC SI
STRINGTOMEMORY_JUST_PASS:
	LOOP STRINGTOMEMORY_AGAIN
	
	POP DX
	POP CX
	POP AX
	RET
STRINGTOMEMORY ENDP

END MAIN